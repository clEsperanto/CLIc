#include "cle.hpp"

#include <array>
#include <gtest/gtest.h>

class TestSato : public ::testing::TestWithParam<std::string>
{
protected:
  std::array<float, 11 * 11 * 1> output;

  std::array<float, 11 * 11 * 1> input = {
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0
  };

  std::array<float, 11 * 11 * 1> valid = {
    0.0011887,  0.00242649, 0.00393715, 0.00519269, 0.00584239, 0.00600314, 0.00584239, 0.00519269, 0.00393715,
    0.00242649, 0.0011887,  0.00375564, 0.00768017, 0.01244524, 0.01629806, 0.01813266, 0.01851889, 0.01813266,
    0.01629806, 0.01244524, 0.00768017, 0.00375564, 0.00924682, 0.01906006, 0.03103951, 0.04041484, 0.04409751,
    0.0444351,  0.04409751, 0.04041484, 0.03103952, 0.01906006, 0.00924682, 0.01778684, 0.03727557, 0.06193392,
    0.08143086, 0.08621543, 0.08301813, 0.08621544, 0.08143086, 0.06193393, 0.03727557, 0.01778684, 0.02657181,
    0.05695897, 0.09860913, 0.13834752, 0.15796456, 0.1550932,  0.15796454, 0.13834752, 0.09860913, 0.05695897,
    0.02657182, 0.03044875, 0.06605215, 0.11738712, 0.17370851, 0.21772212, 0.23432663, 0.21772212, 0.1737085,
    0.11738711, 0.06605214, 0.03044875, 0.02657181, 0.05695897, 0.09860913, 0.13834752, 0.15796456, 0.15509318,
    0.15796454, 0.13834752, 0.09860913, 0.05695897, 0.02657181, 0.01778684, 0.03727557, 0.06193392, 0.08143086,
    0.08621543, 0.08301814, 0.08621544, 0.08143086, 0.06193393, 0.03727557, 0.01778684, 0.00924682, 0.01906006,
    0.03103951, 0.04041483, 0.0440975,  0.0444351,  0.04409751, 0.04041484, 0.03103952, 0.01906006, 0.00924682,
    0.00375564, 0.00768017, 0.01244524, 0.01629806, 0.01813266, 0.01851889, 0.01813266, 0.01629806, 0.01244524,
    0.00768017, 0.00375564, 0.0011887,  0.00242649, 0.00393715, 0.00519269, 0.00584239, 0.00600314, 0.00584239,
    0.00519269, 0.00393715, 0.00242649, 0.0011887,
  };
};


TEST_P(TestSato, execute)
{
  std::string param = GetParam();
  cle::BackendManager::getInstance().setBackend(param);
  auto device = cle::BackendManager::getInstance().getBackend().getDevice("", "gpu");
  device->setWaitToFinish(true);

  auto gpu_input = cle::Array::create(11, 11, 1, 2, cle::dType::FLOAT, cle::mType::BUFFER, device);
  gpu_input->writeFrom(input.data());

  auto gpu_output = cle::tier3::sato_filter_func(device, gpu_input, nullptr, 1, 3, 1);

  gpu_output->readTo(output.data());
  for (int i = 0; i < output.size(); i++)
  {
    EXPECT_NEAR(output[i], valid[i], 0.0001);
  }
}


std::vector<std::string>
getParameters()
{
  std::vector<std::string> parameters;
#if USE_OPENCL
  parameters.push_back("opencl");
#endif
#if USE_CUDA
  parameters.push_back("cuda");
#endif
  return parameters;
}

INSTANTIATE_TEST_SUITE_P(InstantiationName, TestSato, ::testing::ValuesIn(getParameters()));
