#include "cle.hpp"

#include <array>
#include <gtest/gtest.h>

class TestSato : public ::testing::TestWithParam<std::string>
{
protected:
  std::array<float, 11 * 11 * 1> output;
  std::array<float, 11 * 11 * 1> input = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
// std::array<float, 11*11*1> valid = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//                                           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//                                           0, 0, 2, 0, 0, 0, 0, 0, 1, 2, 0, 5, 0, 0, 0, 1, 0, 0, 5, 4, 4,
//                                           0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 6, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0,
//                                           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 5, 0, 0,
//                                           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
};



TEST_P(TestSato, execute)
{
  std::string param = GetParam();
  cle::BackendManager::getInstance().setBackend(param);
  auto device = cle::BackendManager::getInstance().getBackend().getDevice("", "gpu");
  device->setWaitToFinish(true);

  auto gpu_input = cle::Array::create(11, 11, 1, 2, cle::dType::FLOAT, cle::mType::BUFFER, device);
  gpu_input->writeFrom(input.data());

  auto gpu_output = cle::tier3::sato_filter_func(device, gpu_input, nullptr, 1, 2, 1);

  cle::print<float>(gpu_output, "output");

  // gpu_output->readTo(output.data());
  // for (int i = 0; i < output.size(); i++)
  // {
  //   EXPECT_EQ(output[i], valid[i]);
  // }
}


std::vector<std::string>
getParameters()
{
  std::vector<std::string> parameters;
#if USE_OPENCL
  parameters.push_back("opencl");
#endif
#if USE_CUDA
  parameters.push_back("cuda");
#endif
  return parameters;
}

INSTANTIATE_TEST_SUITE_P(InstantiationName, TestSato, ::testing::ValuesIn(getParameters()));



[[0.276879, 0.00255649, 0.0128667, 0.0303616, 0.0406672, 0.0428482, 0.0406672, 0.0303616, 0.0128667, 0.00255649, 0.000190058], 
[0.00115799, 0.0147979, 0.0744147, 0.17559, 0.235189, 0.247802, 0.235189, 0.17559, 0.0744147, 0.0147979, 0.00115799], 
[0.00924095, 0.021176, 0.0656592, 0.14817, 0.197074, 0.206986, 0.197074, 0.14817, 0.0656592, 0.021176, 0.00924096], 
[0.0801468, 0.115542, 0.102887, 0.0698111, 0.0160736, 9.95858e-10, 0.0110881, 0.0698111, 0.102887, 0.115542, 0.0801468], 
[0.213948, 0.276879, 0.251331, 0.188634, 0.0350153, 2.31256e-09, 0.0233297, 0.188634, 0.251331, 0.276879, 0.213948], 
[0.203185, 0.118672, 0.0166652, 3.84121e-10, 1.66044e-11, 0, 0, 8.38999e-10, 0.0166652, 0.118672, 0.203185], 
[0.213948, 0.276879, 0.251331, 0.188634 0.0233297 0 0.0350153 0.188634 ,0.251331 ,0.276879 ,0.213948], 
[0.0801468, 0.115542, 0.102887, 0.0698111 0.0110881 0 0.0160736 0.0698111 ,0.102887 ,0.115542 ,0.0801468], 
[0.00924095, 0.021176, 0.0656592, 0.14817 0.197074 0.206986 0.197074 0.14817 ,0.0656592 ,0.021176 ,0.00924096], 
[0.00115799, 0.0147979, 0.0744147, 0.17559 0.235189 0.247802 0.235189 0.17559 ,0.0744147 ,0.0147979 ,0.00115799], 
[0.000190058, 0.00255649, 0.0128667, 0.0303616 0.0406672 0.0428482 0.0406672 0.0303616 ,0.0128667 ,0.00255649 ,0.000190058]]