#include "cle.hpp"

#include <array>
#include <gtest/gtest.h>

class TestSato : public ::testing::TestWithParam<std::string>
{
protected:
  std::array<float, 11 * 11 * 1> output;

  std::array<float, 11 * 11 * 1> input = {
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0
};

std::array<float, 11*11*1> valid = { 0.0112151 , 0.0206203 , 0.03205739, 0.0431509 , 0.0512143 , 0.05416438, 0.0512143 , 0.0431509 , 0.03205739, 0.0206203 , 0.0112151,
0.0253497 , 0.04355308, 0.06319985, 0.08013251, 0.0913422 , 0.09524193, 0.0913422 , 0.08013251, 0.06319985, 0.04355308, 0.0253497,
0.0437277 , 0.06753511, 0.086     , 0.09469882, 0.09582179, 0.09513772, 0.09582179, 0.09469882, 0.086     , 0.06753512, 0.0437277,
0.05911226, 0.0777413 , 0.07557909, 0.06053596, 0.07477176, 0.07828559, 0.07477177, 0.06053596, 0.07557909, 0.07774131, 0.0591122,
0.06654514, 0.07211446, 0.04840431, 0.0246581 , 0.        , 0.        , 0.        , 0.0246581 , 0.04840431, 0.07211445, 0.0665451,
0.06813211, 0.06671215, 0.03228093, 0.        , 0.        , 0.        , 0.        , 0.        , 0.03228093, 0.06671216, 0.0681321,
0.06654514, 0.07211447, 0.04840431, 0.0246581 , 0.        , 0.        , 0.        , 0.0246581 , 0.04840431, 0.07211447, 0.0665451,
0.05911227, 0.07774131, 0.07557909, 0.06053596, 0.07477176, 0.07828559, 0.07477177, 0.06053596, 0.0755791 , 0.07774131, 0.0591122,
0.0437277 , 0.06753512, 0.086     , 0.09469882, 0.09582179, 0.09513772, 0.09582179, 0.09469882, 0.086     , 0.06753512, 0.0437277,
0.0253497 , 0.04355308, 0.06319985, 0.08013251, 0.0913422 , 0.09524193, 0.0913422 , 0.08013251, 0.06319985, 0.04355308, 0.0253497,
0.0112151 , 0.0206203 , 0.03205739, 0.0431509 ,  0.0512143 , 0.05416438, 0.0512143 , 0.0431509 , 0.03205739, 0.0206203 , 0.0112151 };
};



TEST_P(TestSato, execute)
{
  std::string param = GetParam();
  cle::BackendManager::getInstance().setBackend(param);
  auto device = cle::BackendManager::getInstance().getBackend().getDevice("", "gpu");
  device->setWaitToFinish(true);

  auto gpu_input = cle::Array::create(11, 11, 1, 2, cle::dType::FLOAT, cle::mType::BUFFER, device);
  gpu_input->writeFrom(input.data());

  auto gpu_output = cle::tier3::sato_filter_func(device, gpu_input, nullptr, 1, 3, 1);

  gpu_output->readTo(output.data());
  for (int i = 0; i < output.size(); i++)
  {
    EXPECT_NEAR(output[i], valid[i], 0.0001);
  }
}


std::vector<std::string>
getParameters()
{
  std::vector<std::string> parameters;
#if USE_OPENCL
  parameters.push_back("opencl");
#endif
#if USE_CUDA
  parameters.push_back("cuda");
#endif
  return parameters;
}

INSTANTIATE_TEST_SUITE_P(InstantiationName, TestSato, ::testing::ValuesIn(getParameters()));



